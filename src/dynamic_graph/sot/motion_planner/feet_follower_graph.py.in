#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright 2011, Florent Lamiraux, Thomas Moulard, JRL, CNRS/AIST
#
# This file is part of dynamic-graph.
# dynamic-graph is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# dynamic-graph is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Lesser Public License for more details.  You should have
# received a copy of the GNU Lesser General Public License along with
# dynamic-graph. If not, see <http://www.gnu.org/licenses/>.

from dynamic_graph import plug
from dynamic_graph.sot.core import FeatureGeneric, Task, RobotSimu
from dynamic_graph.sot.motion_planner.feet_follower import \
    FeetFollowerFromFile, FeetFollowerAnalyticalPg, PostureError, \
    WaistYaw
from dynamic_graph.tracer_real_time import TracerRealTime

from dynamic_graph.sot.motion_planner.math import *

from dynamic_graph.sot.motion_planner.motion_plan.tools import addTrace


class FeetFollowerGraph(object):
    """
    Robot executing the trajectory.
    """
    robot = None

    """
    Solver associated with the robot executing the trajectory.
    """
    solver = None

    """
    Feet follower entity used to execute the movement.
    """
    feetFollower = None

    """
    Task constraining the robot upper dofs.
    """
    postureTask = None

    """
    Feature constraining the robot upper dofs.
    """
    postureFeature = None

    """
    Entity computing the error associated with the posture task.
    """
    postureError = None

    """
    Tracer used to log various data.
    """
    trace = None


    """
    Gain used to reach the initial position.
    """
    initialGain = 1.

    """
    Gain used during the motion.
    """
    gain = 175.

    def __init__(self, robot, solver):
        self.robot = robot
        self.solver = solver
        self.trace = TracerRealTime('trace')
        self.trace.setBufferSize(2**25)
        self.trace.open('/tmp/','feet_follower_','.dat')

        # Recompute trace.triger at each iteration to enable tracing.
        self.robot.device.after.addSignal(self.trace.name +'.triger')


    def setAnklePosition(self):
        # Setup feet to ankle transformation.
        anklePosL = self.robot.dynamic.getAnklePositionInFootFrame()
        anklePosR = (anklePosL[0], -anklePosL[1], anklePosL[2])

        self.feetFollower.setLeftFootToAnkle(translationToSE3(anklePosL))
        self.feetFollower.setRightFootToAnkle(translationToSE3(anklePosR))

    def setInitialFeetPosition(self):
        self.feetFollower.setInitialLeftAnklePosition(
            self.robot.features['left-ankle'].reference.value)
        self.feetFollower.setInitialRightAnklePosition(
            self.robot.features['right-ankle'].reference.value)

    def setup(self):
        # Lower the gains to reduce the initial velocity.
        self.robot.comTask.controlGain.value = self.initialGain
        self.robot.tasks['left-ankle'].controlGain.value = self.initialGain
        self.robot.tasks['right-ankle'].controlGain.value = self.initialGain

        # Make sure the CoM is converging toward the starting
        # CoM of the trajectory.
        self.robot.featureComDes.errorIN.value = \
            (0., 0., self.robot.dynamic.com.value[2])
        self.robot.featureCom.selec.value = '111'

        # Plug the feet follower output signals.
        plug(self.feetFollower.zmp, self.robot.device.zmp)

        plug(self.feetFollower.com, self.robot.featureComDes.errorIN)
        plug(self.feetFollower.signal('left-ankle'),
             self.robot.features['left-ankle'].reference)
        plug(self.feetFollower.signal('right-ankle'),
             self.robot.features['right-ankle'].reference)

        # Plug velocities into TaskPD.
        plug(self.feetFollower.comVelocity, self.robot.comTask.errorDot)
        for op in ['left-ankle', 'right-ankle']:
            plug(self.feetFollower.signal(op + 'Velocity'),
                 self.robot.tasks[op].errorDot)
        plug(self.feetFollower.waistYawVelocity,
             self.robot.tasks['waist'].errorDot)

        # Initialize the posture task.
        self.postureTask = Task(self.robot.name + '_posture')
        self.postureFeature = FeatureGeneric(
            self.robot.name + '_postureFeature')
        self.postureError = PostureError('PostureError')

        posture = list(self.robot.halfSitting)
        self.postureError.setPosture(tuple(posture))

        plug(self.robot.device.state, self.postureError.state)
        plug(self.postureError.error, self.postureFeature.errorIN)
        self.postureFeature.jacobianIN.value = self.computeJacobianPosture()
        self.postureTask.add(self.postureFeature.name)
        self.postureTask.controlGain.value = self.initialGain

        # Initialize the waist yaw task.
        self.robot.features['waist'].selec.value = '111000'
        plug(self.feetFollower.waistYaw, self.robot.features['waist'].reference)
        self.robot.tasks['waist'].controlGain.value = self.initialGain

        # Tasks
        self.solver.sot.remove(self.robot.tasks['right-ankle'].name)
        self.solver.sot.remove(self.robot.tasks['left-ankle'].name)
        self.solver.sot.remove(self.robot.comTask.name)

        self.solver.sot.push(self.postureTask.name)
        self.solver.sot.push(self.robot.comTask.name)
        self.solver.sot.push(self.robot.tasks['left-ankle'].name)
        self.solver.sot.push(self.robot.tasks['right-ankle'].name)
        self.solver.sot.push(self.robot.tasks['waist'].name)

    def setupTrace(self):
        # Feature sdes input.
        for s in ['zmp', 'waist',
                  'com', 'left-ankle', 'right-ankle', 'waistYaw',
                  'comVelocity', 'left-ankleVelocity',
                  'right-ankleVelocity', 'waistYawVelocity']:
            addTrace(self.robot, self.trace,
                     self.feetFollower.name, s)

        for s in self.robot.OperationalPoints + [
            "com", "zmp", "angularmomentum",
            "position", "velocity", "acceleration"]:
            addTrace(self.robot, self.trace,
                     self.robot.dynamic.name, s)

        for s in self.robot.OperationalPoints:
            addTrace(self.robot, self.trace,
                     self.robot.features[s]._reference.name, 'position')
            addTrace(self.robot, self.trace,
                     self.robot.tasks[s].name, 'error')

        addTrace(self.robot, self.trace,
                 self.robot.featureComDes.name, 'errorIN')
        addTrace(self.robot, self.trace,
                 self.robot.comTask.name, 'error')

        addTrace(self.robot, self.trace,
                 self.robot.device.name, 'zmp')
        addTrace(self.robot, self.trace,
                 self.robot.device.name, 'control')
        addTrace(self.robot, self.trace,
                 self.robot.device.name, 'state')
        if type(self.robot.device) != RobotSimu:
            addTrace(self.robot, self.trace,
                     self.robot.device.name, 'robotState')

        if 'velocityDerivator' in self.robot.__dict__:
            addTrace(self.robot, self.trace,
                     self.robot.velocityDerivator.name, 'sout')
        if 'accelerationDerivator' in self.robot.__dict__:
            addTrace(self.robot, self.trace,
                     self.robot.accelerationDerivator.name, 'sout')


    def computeJacobianPosture(self):
        j = []
        for i in xrange(36):
            if i >= 6 + 2 * 6:
                j.append(oneVector(i))
        return tuple(j)

    def canStart(self):
        securityThreshold = 1e-3
        return (self.robot.comTask.error.value <=
                (securityThreshold,) * len(self.robot.comTask.error.value)

                and self.robot.tasks['left-ankle'].error.value <=
                (securityThreshold,)
                * len(self.robot.tasks['left-ankle'].error.value)

                and self.robot.tasks['right-ankle'].error.value <=
                (securityThreshold,)
                * len(self.robot.tasks['right-ankle'].error.value)

                and self.postureTask.error.value <=
                (securityThreshold,) * len(self.postureTask.error.value))

    def start(self, beforeStart=None):
        if not self.canStart():
            print("Robot has not yet converged to the initial position,"
                  " please wait and try again.")
            return
        self.robot.comTask.controlGain.value = self.gain
        self.robot.tasks['left-ankle'].controlGain.value = self.gain
        self.robot.tasks['right-ankle'].controlGain.value = self.gain
        self.postureTask.controlGain.value = self.gain
        self.robot.tasks['waist'].controlGain.value = self.gain
        self.setupTrace()
        if beforeStart:
            beforeStart()
        self.trace.start()
        self.feetFollower.start()

    def __str__(self):
        return "feet follower"

class FeetFollowerFromFileGraph(FeetFollowerGraph):
    defaultTrajectoryDirectory = '@TRAJECTORY_PATH@'

    # Slow trajectory.
    defaultTrajectoryPath = defaultTrajectoryDirectory + '/simple_trajectory'

    def __init__(self, robot, solver, trajectoryPath = defaultTrajectoryPath):
        FeetFollowerGraph.__init__(self, robot, solver)
        self.feetFollower = FeetFollowerFromFile('feet-follower')
        self.setAnklePosition()
        self.setInitialFeetPosition()
        self.feetFollower.setComZ(0.814)
        self.feetFollower.readTrajectory(trajectoryPath)
        self.setup()

    def __str__(self):
        return "feet follower from file"


class FeetFollowerAnalyticalPgGraph(FeetFollowerGraph):
    # Parameters are:
    # - first slide
    # - horizontal distance
    # - maximum feet height
    # - second slide
    # - x
    # - y
    # - theta

    defaultSteps = [
        (-0.,  0.24, 0.25,-0., 0.31,-0.00, 0.),
        ]

    def __init__(self, robot, solver, steps = defaultSteps, comZ = None, waistFile = None,
                 gazeFile = None, zmpFile = None):
        FeetFollowerGraph.__init__(self, robot, solver)
        self.feetFollower = FeetFollowerAnalyticalPg('feet-follower')
        self.setAnklePosition()
        self.setInitialFeetPosition()
        if comZ:
            self.feetFollower.setComZ(comZ)
        else:
            self.feetFollower.setComZ(self.robot.dynamic.com.value[2])
        if waistFile:
            self.feetFollower.setWaistFile(waistFile)
        if gazeFile:
            self.feetFollower.setGazeFile(gazeFile)
        if zmpFile:
            self.feetFollower.setZmpFile(zmpFile)
        if steps:
            for step in steps:
                self.feetFollower.pushStep(step)
            self.feetFollower.generateTrajectory()
            self.setup()

    def __str__(self):
        return "feet follower analytical pg"

__all__ = [
    "FeetFollowerGraph",
    "FeetFollowerFromFileGraph",
    "FeetFollowerAnalyticalPgGraph"
    ]

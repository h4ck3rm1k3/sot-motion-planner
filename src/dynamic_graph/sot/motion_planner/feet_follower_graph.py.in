#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright 2011, Florent Lamiraux, Thomas Moulard, JRL, CNRS/AIST
#
# This file is part of dynamic-graph.
# dynamic-graph is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# dynamic-graph is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Lesser Public License for more details.  You should have
# received a copy of the GNU Lesser General Public License along with
# dynamic-graph. If not, see <http://www.gnu.org/licenses/>.

from dynamic_graph import plug
from dynamic_graph.sot.core import FeatureGeneric, FeaturePosture, \
    TaskPD, RobotSimu
from dynamic_graph.sot.core.feature_position import FeaturePosition
from dynamic_graph.sot.motion_planner.feet_follower import \
    FeetFollowerFromFile, FeetFollowerAnalyticalPg, WaistYaw
from dynamic_graph.tracer_real_time import TracerRealTime

from dynamic_graph.sot.motion_planner.math import *

from dynamic_graph.sot.motion_planner.motion_plan.tools import addTrace


class FeetFollowerGraph(object):
    nameId = 0
    """
    Last id used to generate the entities name.
    """

    """
    Robot executing the trajectory.
    """
    robot = None

    """
    Solver associated with the robot executing the trajectory.
    """
    solver = None

    """
    Feet follower entity used to execute the movement.
    """
    feetFollower = None

    """
    Task constraining the robot upper dofs.
    """
    postureTask = None

    """
    Feature constraining the robot upper dofs.
    """
    postureFeature = None

    features = None
    tasks = None
    featureCom = None
    featureComDes = None
    taskCom = None

    """
    Tracer used to log various data.
    """
    trace = None


    """
    Gain used to reach the initial position.
    """
    initialGain = 1.

    """
    Gain used during the motion.
    """
    gain = 175.

    tracedSignals = {
        'FeetFollower': ['zmp', 'waist',
                         'com', 'left-ankle', 'right-ankle', 'waistYaw',
                         'comVelocity', 'left-ankleVelocity',
                         'right-ankleVelocity', 'waistYawVelocity'],
        'Robot': ["com", "zmp", "angularmomentum",
                  "position", "velocity", "acceleration"],
        'Device': ['zmp', 'control', 'state']
        }

    @staticmethod
    def makeName():
        s = "walk_{0}".format(FeetFollowerGraph.nameId)
        FeetFollowerGraph.nameId = FeetFollowerGraph.nameId + 1
        return s

    def __init__(self, robot, solver, trace = None,
                 postureFeature = None,
                 postureTask = None,
                 postureTaskDofs = None):
        self.name = FeetFollowerGraph.makeName()
        self.robot = robot
        self.solver = solver

        self.postureFeature = postureFeature
        self.postureTask = postureTask
        self.postureTaskDofs = postureTaskDofs
        if not self.postureTaskDofs:
            self.postureTaskDofs = []
            for i in xrange(len(robot.halfSitting) - 6):
                # Disable legs dofs.
                if i < 12: #FIXME: not generic enough
                    self.postureTaskDofs.append((i + 6, False))
                else:
                    self.postureTaskDofs.append((i + 6, True))

        if trace:
            self.trace = trace
        else:
            self.trace = TracerRealTime('trace')
            self.trace.setBufferSize(2**20)
            self.trace.open('/tmp/','feet_follower_','.dat')
            # Recompute trace.triger at each iteration to enable tracing.
            self.robot.device.after.addSignal(self.trace.name +'.triger')


    def setAnklePosition(self):
        # Setup feet to ankle transformation.
        anklePosL = self.robot.dynamic.getAnklePositionInFootFrame()
        anklePosR = (anklePosL[0], -anklePosL[1], anklePosL[2])

        self.feetFollower.setLeftFootToAnkle(translationToSE3(anklePosL))
        self.feetFollower.setRightFootToAnkle(translationToSE3(anklePosR))

    def setInitialFeetPosition(self):
        self.feetFollower.setInitialLeftAnklePosition(
            self.robot.features['left-ankle'].reference.value)
        self.feetFollower.setInitialRightAnklePosition(
            self.robot.features['right-ankle'].reference.value)

    def setup(self):
        # Center of mass features and task.
        self.robot.dynamic.com.recompute(0)
        self.robot.dynamic.Jcom.recompute(0)

        featureComName = '{0}_feature_com'.format(self.name)
        self.featureCom = FeatureGeneric(featureComName)
        plug(self.robot.dynamic.com, self.featureCom.errorIN)
        plug(self.robot.dynamic.Jcom,
             self.featureCom.jacobianIN)
        self.featureComDes = FeatureGeneric('{0}_feature_ref_com'.format(self.name))
        self.featureComDes.errorIN.value = self.robot.dynamic.com.value
        self.featureCom.sdes.value = self.featureComDes
        self.comTask = TaskPD('{0}_task_com'.format(self.name))
        self.comTask.add(featureComName)
        self.comTask.controlGain.value = 1.

        # Operational points features/tasks.
        self.features = dict()
        self.tasks = dict()
        for op in ['left-ankle', 'right-ankle', 'waist']:
            featureName = '{0}_feature_{1}'.format(self.name, op)
            self.robot.dynamic.signal(op).recompute(0)
            self.robot.dynamic.signal('J'+op).recompute(0)
            self.features[op] = \
                FeaturePosition(featureName,
                                self.robot.dynamic.signal(op),
                                self.robot.dynamic.signal('J' + op),
                                self.robot.dynamic.signal(op).value)
            self.tasks[op] = TaskPD('{0}_task_{1}'.format(self.name, op))
            self.tasks[op].add(featureName)
            self.tasks[op].controlGain.value = .2

        # Lower the gains to reduce the initial velocity.
        self.comTask.controlGain.value = self.initialGain
        self.tasks['left-ankle'].controlGain.value = self.initialGain
        self.tasks['right-ankle'].controlGain.value = self.initialGain

        # Make sure the CoM is converging toward the starting
        # CoM of the trajectory.
        self.featureComDes.errorIN.value = \
            (0., 0., self.robot.dynamic.com.value[2])
        self.featureCom.selec.value = '111'

        # Plug the feet follower output signals.
        plug(self.feetFollower.zmp, self.robot.device.zmp)

        plug(self.feetFollower.com, self.featureComDes.errorIN)
        plug(self.feetFollower.signal('left-ankle'),
             self.features['left-ankle'].reference)
        plug(self.feetFollower.signal('right-ankle'),
             self.features['right-ankle'].reference)

        # Plug velocities into TaskPD.
        plug(self.feetFollower.comVelocity, self.comTask.errorDot)
        for op in ['left-ankle', 'right-ankle']:
            plug(self.feetFollower.signal(op + 'Velocity'),
                 self.tasks[op].errorDot)
        plug(self.feetFollower.waistYawVelocity,
             self.tasks['waist'].errorDot)

        # Initialize the posture task.
        if not self.postureFeature:
            self.postureFeature = FeaturePosture(
                '{0}_postureFeature'.format(self.name))
            plug(self.robot.device.state, self.postureFeature.state)

            posture = list(self.robot.halfSitting)
            self.postureFeature.setPosture(tuple(posture))
            for (dof, isEnabled) in self.postureTaskDofs:
                self.postureFeature.selectDof(dof, isEnabled)

        if not self.postureTask:
            self.postureTask = Task('{0}_posture'.format(self.name))
            self.postureTask.add(self.postureFeature.name)
            self.postureTask.controlGain.value = self.initialGain

        # Initialize the waist yaw task.
        self.features['waist'].selec.value = '111000'
        plug(self.feetFollower.waistYaw, self.features['waist'].reference)
        self.tasks['waist'].controlGain.value = self.initialGain

    def setupTrace(self):
        # Feet follower
        for s in self.tracedSignals['FeetFollower']:
            addTrace(self.robot, self.trace,
                     self.feetFollower.name, s)

        # Geometry
        for s in self.robot.OperationalPoints + self.tracedSignals['Robot']:
            addTrace(self.robot, self.trace,
                     self.robot.dynamic.name, s)

        # Robot features
        for s in self.robot.OperationalPoints:
            addTrace(self.robot, self.trace,
                     self.robot.features[s]._reference.name, 'position')
            addTrace(self.robot, self.trace,
                     self.robot.tasks[s].name, 'error')

        # Com
        addTrace(self.robot, self.trace,
                 self.robot.featureComDes.name, 'errorIN')
        addTrace(self.robot, self.trace,
                 self.robot.comTask.name, 'error')

        # Device
        for s in self.tracedSignals['Device']:
            addTrace(self.robot, self.trace,
                     self.robot.device.name, s)
        if type(self.robot.device) != RobotSimu:
            addTrace(self.robot, self.trace,
                     self.robot.device.name, 'robotState')

        # Misc
        if 'velocityDerivator' in self.robot.__dict__:
            addTrace(self.robot, self.trace,
                     self.robot.velocityDerivator.name, 'sout')
        if 'accelerationDerivator' in self.robot.__dict__:
            addTrace(self.robot, self.trace,
                     self.robot.accelerationDerivator.name, 'sout')


    def computeJacobianPosture(self):
        j = []
        for i in xrange(36):
            if i >= 6 + 2 * 6:
                j.append(oneVector(i))
        return tuple(j)

    def canStart(self):
        securityThreshold = 1e-3
        return (self.comTask.error.value <=
                (securityThreshold,) * len(self.comTask.error.value)

                and self.tasks['left-ankle'].error.value <=
                (securityThreshold,)
                * len(self.tasks['left-ankle'].error.value)

                and self.tasks['right-ankle'].error.value <=
                (securityThreshold,)
                * len(self.tasks['right-ankle'].error.value)

                and self.postureTask.error.value <=
                (securityThreshold,) * len(self.postureTask.error.value))

    def start(self, beforeStart=None):
        if not self.canStart():
            print("Robot has not yet converged to the initial position,"
                  " please wait and try again.")
            return
        self.comTask.controlGain.value = self.gain
        self.tasks['left-ankle'].controlGain.value = self.gain
        self.tasks['right-ankle'].controlGain.value = self.gain
        self.postureTask.controlGain.value = self.gain
        self.tasks['waist'].controlGain.value = self.gain
        self.setupTrace()
        if beforeStart:
            beforeStart()
        self.trace.start()
        self.feetFollower.start()

    def __str__(self):
        return "feet follower"

class FeetFollowerFromFileGraph(FeetFollowerGraph):
    defaultTrajectoryDirectory = '@TRAJECTORY_PATH@'

    # Slow trajectory.
    defaultTrajectoryPath = defaultTrajectoryDirectory + '/simple_trajectory'

    def __init__(self, robot, solver, trajectoryPath = defaultTrajectoryPath):
        FeetFollowerGraph.__init__(self, robot, solver)
        self.feetFollower = FeetFollowerFromFile(
            '{0}_feet-follower'.format(self.name))
        self.setAnklePosition()
        self.setInitialFeetPosition()
        self.feetFollower.setComZ(0.814)
        self.feetFollower.readTrajectory(trajectoryPath)
        self.setup()

    def __str__(self):
        return "feet follower from file"


class FeetFollowerAnalyticalPgGraph(FeetFollowerGraph):
    # Parameters are:
    # - first slide
    # - horizontal distance
    # - maximum feet height
    # - second slide
    # - x
    # - y
    # - theta

    defaultSteps = [
        (-0.,  0.24, 0.25,-0., 0.31,-0.00, 0.),
        ]

    def __init__(self, robot, solver,
                 steps = defaultSteps,
                 comZ = None, waistFile = None,
                 gazeFile = None, zmpFile = None,
                 trace = None,
                 postureFeature = None,
                 postureTask = None,
                 postureTaskDofs = None):
        FeetFollowerGraph.__init__(self, robot, solver, trace,
                                   postureFeature, postureTask,
                                   postureTaskDofs)
        self.feetFollower = FeetFollowerAnalyticalPg(
            '{0}_feet-follower'.format(self.name))
        self.setAnklePosition()
        self.setInitialFeetPosition()
        if comZ:
            self.feetFollower.setComZ(comZ)
        else:
            self.feetFollower.setComZ(self.robot.dynamic.com.value[2])
        if waistFile:
            self.feetFollower.setWaistFile(waistFile)
        if gazeFile:
            self.feetFollower.setGazeFile(gazeFile)
        if zmpFile:
            self.feetFollower.setZmpFile(zmpFile)
        if steps:
            for step in steps:
                self.feetFollower.pushStep(step)
            self.feetFollower.generateTrajectory()
            self.setup()

    def __str__(self):
        return "feet follower analytical pg"

__all__ = [
    "FeetFollowerGraph",
    "FeetFollowerFromFileGraph",
    "FeetFollowerAnalyticalPgGraph"
    ]

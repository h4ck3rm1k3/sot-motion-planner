#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright 2011, Florent Lamiraux, Thomas Moulard, JRL, CNRS/AIST
#
# This file is part of dynamic-graph.
# dynamic-graph is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# dynamic-graph is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Lesser Public License for more details.  You should have
# received a copy of the GNU Lesser General Public License along with
# dynamic-graph. If not, see <http://www.gnu.org/licenses/>.

from dynamic_graph import plug
from dynamic_graph.sot.core import FeatureGeneric, TaskPD, RobotSimu
from dynamic_graph.sot.core.feature_position import FeaturePosition
from dynamic_graph.sot.motion_planner.feet_follower import \
    FeetFollowerFromFile, FeetFollowerAnalyticalPg, WaistYaw

from dynamic_graph.sot.motion_planner.math import *

from dynamic_graph.sot.motion_planner.motion_plan.tools import addTrace


class FeetFollowerGraph(object):
    nameId = 0
    """
    Last id used to generate the entities name.
    """

    """
    Robot executing the trajectory.
    """
    robot = None

    """
    Solver associated with the robot executing the trajectory.
    """
    solver = None

    """
    Feet follower entity used to execute the movement.
    """
    feetFollower = None

    features = None
    tasks = None
    featureCom = None
    featureComDes = None
    taskCom = None

    """
    Tracer used to log various data.
    """
    trace = None


    """
    Gain used to reach the initial position.
    """
    initialGain = 1.


    @staticmethod
    def makeName():
        s = "walk_{0}".format(FeetFollowerGraph.nameId)
        FeetFollowerGraph.nameId = FeetFollowerGraph.nameId + 1
        return s

    def __init__(self, robot, solver,
                 initialLeftAnklePosition = None,
                 initialRightAnklePosition = None):
        self.name = FeetFollowerGraph.makeName()
        self.robot = robot
        self.solver = solver
        self.trace = self.robot.tracer

        if initialLeftAnklePosition:
            self.initialLeftAnklePosition = initialLeftAnklePosition
        else:
            self.initialLeftAnklePosition = \
                self.robot.features['left-ankle'].reference.value

        if initialRightAnklePosition:
            self.initialRightAnklePosition = initialRightAnklePosition
        else:
            self.initialRightAnklePosition = \
                self.robot.features['right-ankle'].reference.value

    def setAnklePosition(self):
        # Setup feet to ankle transformation.
        anklePosL = self.robot.dynamic.getAnklePositionInFootFrame()
        anklePosR = (anklePosL[0], -anklePosL[1], anklePosL[2])

        self.feetFollower.setLeftFootToAnkle(translationToSE3(anklePosL))
        self.feetFollower.setRightFootToAnkle(translationToSE3(anklePosR))

    def setInitialFeetPosition(self):
        self.feetFollower.setInitialLeftAnklePosition(
            self.initialLeftAnklePosition)
        self.feetFollower.setInitialRightAnklePosition(
            self.initialRightAnklePosition)

    def setup(self):
        # Center of mass features and task.
        (self.featureCom, self.featureComDes, self.comTask) = \
            self.robot.createCenterOfMassFeatureAndTask(
            '{0}_feature_com'.format(self.name),
            '{0}_feature_ref_com'.format(self.name),
            '{0}_task_com'.format(self.name),
            selec = '111',
            gain = self.initialGain)

        # Make sure the CoM is converging toward the starting
        # CoM of the trajectory.
        self.featureComDes.errorIN.value = \
            (0., 0., self.robot.dynamic.com.value[2])


        # Operational points features/tasks.
        self.features = dict()
        self.tasks = dict()
        for op in ['left-ankle', 'right-ankle', 'waist']:
            (self.features[op], self.tasks[op]) = \
                self.robot.createOperationalPointFeatureAndTask(
                op, '{0}_feature_{1}'.format(self.name, op),
                '{0}_task_{1}'.format(self.name, op),
                gain = self.initialGain)

        # Plug the feet follower output signals.
        plug(self.feetFollower.zmp, self.robot.device.zmp)

        plug(self.feetFollower.com, self.featureComDes.errorIN)
        plug(self.feetFollower.signal('left-ankle'),
             self.features['left-ankle'].reference)
        plug(self.feetFollower.signal('right-ankle'),
             self.features['right-ankle'].reference)

        # Plug velocities into TaskPD.
        plug(self.feetFollower.comVelocity, self.comTask.errorDot)
        for op in ['left-ankle', 'right-ankle']:
            plug(self.feetFollower.signal(op + 'Velocity'),
                 self.tasks[op].errorDot)
        plug(self.feetFollower.waistYawVelocity,
             self.tasks['waist'].errorDot)

        # Initialize the waist yaw task.
        self.features['waist'].selec.value = '111000'
        plug(self.feetFollower.waistYaw, self.features['waist'].reference)
        self.tasks['waist'].controlGain.value = self.initialGain

    def setupTrace(self):
        # Feet follower
        for s in ['zmp', 'waist',
                  'com', 'left-ankle', 'right-ankle', 'waistYaw',
                  'comVelocity', 'left-ankleVelocity',
                  'right-ankleVelocity', 'waistYawVelocity']:
            addTrace(self.robot, self.trace, self.feetFollower.name, s)

    def canStart(self):
        securityThreshold = 1e-3
        return (self.comTask.error.value <=
                (securityThreshold,) * len(self.comTask.error.value)

                and self.tasks['left-ankle'].error.value <=
                (securityThreshold,)
                * len(self.tasks['left-ankle'].error.value)

                and self.tasks['right-ankle'].error.value <=
                (securityThreshold,)
                * len(self.tasks['right-ankle'].error.value))

    def __str__(self):
        return "feet follower"

class FeetFollowerFromFileGraph(FeetFollowerGraph):
    defaultTrajectoryDirectory = '@TRAJECTORY_PATH@'

    # Slow trajectory.
    defaultTrajectoryPath = defaultTrajectoryDirectory + '/simple_trajectory'

    def __init__(self, robot, solver, trajectoryPath = defaultTrajectoryPath):
        FeetFollowerGraph.__init__(self, robot, solver)
        self.feetFollower = FeetFollowerFromFile(
            '{0}_feet-follower'.format(self.name))
        self.setAnklePosition()
        self.setInitialFeetPosition()
        self.feetFollower.setComZ(0.814)
        self.feetFollower.readTrajectory(trajectoryPath)
        self.setup()

    def __str__(self):
        return "feet follower from file"


class FeetFollowerAnalyticalPgGraph(FeetFollowerGraph):
    # Parameters are:
    # - first slide
    # - horizontal distance
    # - maximum feet height
    # - second slide
    # - x
    # - y
    # - theta

    defaultSteps = [
        (-0.,  0.24, 0.25,-0., 0.31,-0.00, 0.),
        ]

    def __init__(self, robot, solver,
                 steps = defaultSteps,
                 comZ = None, waistFile = None,
                 gazeFile = None, zmpFile = None,
                 initialLeftAnklePosition = None,
                 initialRightAnklePosition = None):
        FeetFollowerGraph.__init__(
            self, robot, solver,
            initialLeftAnklePosition, initialRightAnklePosition)
        self.feetFollower = FeetFollowerAnalyticalPg(
            '{0}_feet-follower'.format(self.name))
        self.setAnklePosition()
        self.setInitialFeetPosition()
        if comZ:
            self.feetFollower.setComZ(comZ)
        else:
            self.feetFollower.setComZ(self.robot.dynamic.com.value[2])
        if waistFile:
            self.feetFollower.setWaistFile(waistFile)
        if gazeFile:
            self.feetFollower.setGazeFile(gazeFile)
        if zmpFile:
            self.feetFollower.setZmpFile(zmpFile)
        if steps:
            for step in steps:
                self.feetFollower.pushStep(step)
            self.feetFollower.generateTrajectory()
            self.setup()

    def __str__(self):
        return "feet follower analytical pg"

__all__ = [
    "FeetFollowerGraph",
    "FeetFollowerFromFileGraph",
    "FeetFollowerAnalyticalPgGraph"
    ]
